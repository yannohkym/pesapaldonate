<?php

namespace App\Http\Controllers;

use App\Models\Donation;
use App\Models\Donor;
use App\Models\Config;
use App\Util\OAuth\OAuthConsumer;
use App\Util\OAuth\OAuthRequest;
use App\Util\OAuth\OAuthSignatureMethod_HMAC_SHA1;
use Illuminate\Http\Request;
use Symfony\Component\Routing\Generator\UrlGeneratorInterface;
use Validator;
use DB;

class DonationController extends Controller
{

    public function index(){
        return view('home');
    }

    public function new( Request $request){
        $validator = Validator::make($request->all(), [
            'name' => 'required',
            'email' => 'required',
            'phone' => 'required',
            'amount' => 'required|integer',
            'schedule' => 'required'
        ]);

        if ($validator->fails()) {
            return back()->withErrors($validator->errors());
        }

        $donation = new Donation();
        $donation->donors_name = $request->input('name');
        $donation->donors_email = $request->input('email');
        $donation->amount = (float)$request->input('amount');
        $donation->period_of_payment = $request->input('schedule');
        $donation->donor_phone_number = $request->input('phone');

        if($donation->save()){
            //create a donor from request data.
            //TODO add donor amount column
            $donor = Donor::where('email',$request->input('email'))->first();
            if(!$donor){
                $donor = new Donor();
                $donor->name = $request->input('name');
                $donor->email = $request->input('email');
                $donor->payment_interval = $request->input('schedule');
                $donor->phone_number = $request->input('phone');
                $donor->save();
            }
            return redirect()->route('donation_pay',['id'=>$donation->id]);
        }else{
            return back()->withErrors(['An error occured while saving the donations details. Please try again later']);
        }

    }


    public function pay($donation_id){
        $donation = Donation::where('id',$donation_id)->first();
        $iframe_src = $this->pesapal($donation);
        if($iframe_src===false){
            return back()->withErrors(['A Configuration error has occurred. Please Contact the site Administrator if you continue seeing this error']);
        }

        return view('donation_process.pay',['iframe'=>$iframe_src]);

    }

    public function pesapal(Donation $donation){
        $config = Config::first();
        if($config){
            $consumer_key = $config->consumer_key;
            $consumer_secret = $config->consumer_secret;
            //pesapal params
            $token = $params = NULL;
            /*
            PesaPal Sandbox is at https://demo.pesapal.com. Use this to test your developement and
            when you are ready to go live change to https://www.pesapal.com.
            */
            //account on demo.pesapal.com. When you are ready to go live make sure you
            //change the secret to the live account registered on www.pesapal.com!
            $signature_method = new OAuthSignatureMethod_HMAC_SHA1();
            $iframelink = 'https://www.pesapal.com/api/PostPesapalDirectOrderV4';//change to
            //https://www.pesapal.com/API/PostPesapalDirectOrderV4 when you are ready to go live!

            //get form details
            $amount = $donation->amount;
            // $amount = 1;
            $amount = number_format($amount,2);//format amount to 2 decimal places
            $cur='KES';
            $desc = 'donation payment';
            $type = 'MERCHANT'; //default value = MERCHANT
            $reference = $donation->id;//unique order id of the transaction, generated by merchant
            $first_name = $donation->donors_name;
            $email =$donation->donors_email;
            $phonenumber = $donation->donor_phone_number;//ONE of email or phonenumber is required
            $url = url("/donation/payment-callback/{$donation->id}");

            $callback_url = $url; //redirect url, the page that will handle the response from pesapal.

            $post_xml = "<?xml version=\"1.0\" encoding=\"utf-8\"?><PesapalDirectOrderInfo xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" Amount=\"".$amount."\" Currency=\"".$cur."\" Description=\"".$desc."\" Type=\"".$type."\" Reference=\"".$reference."\" FirstName=\"".$first_name."\" LastName=\"".$first_name."\" Email=\"".$email."\" PhoneNumber=\"".$phonenumber."\" xmlns=\"http://www.pesapal.com\" />";
            $post_xml = htmlentities($post_xml);

            $consumer = new OAuthConsumer($consumer_key, $consumer_secret);

            //post transaction to pesapal
            $iframe_src = OAuthRequest::from_consumer_and_token($consumer, $token, "GET", $iframelink, $params);
            $iframe_src->set_parameter("oauth_callback", $callback_url);
            $iframe_src->set_parameter("pesapal_request_data", $post_xml);
            $iframe_src->sign_request($signature_method, $consumer, $token);
            return $iframe_src;

        }else{
            return false;
        }
    }

    public function callback($donation_id)
    {
        $donation = Donation::where('id',$donation_id)->first();
        $statusrequestAPI = 'https://www.pesapal.com/api/querypaymentstatus';
        $consumer_key = $this->consumer_key;//Register a merchant account on
        //demo.pesapal.com and use the merchant key for testing.
        //When you are ready to go live make sure you change the key to the live account
        //registered on www.pesapal.com!
        $consumer_secret = $this->consumer_secret;
        $signature_method = new OAuthSignatureMethod_HMAC_SHA1();
        $pesapalTrackingId=$_GET['pesapal_transaction_tracking_id'];
        $pesapal_merchant_reference=$_GET['pesapal_merchant_reference'];
        $token = $params = NULL;
        $consumer = new OAuthConsumer($consumer_key, $consumer_secret);

        //get transaction status
        $request_status = OAuthRequest::from_consumer_and_token($consumer, $token, "GET", $statusrequestAPI, $params);
        $request_status->set_parameter("pesapal_merchant_reference", $pesapal_merchant_reference);
        $request_status->set_parameter("pesapal_transaction_tracking_id",$pesapalTrackingId);
        $request_status->sign_request($signature_method, $consumer, $token);

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $request_status);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_HEADER, 1);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
        if(defined('CURL_PROXY_REQUIRED')) if (CURL_PROXY_REQUIRED == 'True')
        {
            $proxy_tunnel_flag = (defined('CURL_PROXY_TUNNEL_FLAG') && strtoupper(CURL_PROXY_TUNNEL_FLAG) == 'FALSE') ? false : true;
            curl_setopt ($ch, CURLOPT_HTTPPROXYTUNNEL, $proxy_tunnel_flag);
            curl_setopt ($ch, CURLOPT_PROXYTYPE, CURLPROXY_HTTP);
            curl_setopt ($ch, CURLOPT_PROXY, CURL_PROXY_SERVER_DETAILS);
        }

        $response = curl_exec($ch);

        $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);
        $raw_header  = substr($response, 0, $header_size - 4);
        $headerArray = explode("\r\n\r\n", $raw_header);
        $header      = $headerArray[count($headerArray) - 1];

        //transaction status
        $elements = preg_split("/=/",substr($response, $header_size));
        $status = $elements[1];

        curl_close ($ch);

        $donation->pesapal_tracking_id = $pesapalTrackingId;
        $donation->pesapal_status = $status;

        if($status==='COMPLETED'){
            $donation->status = 'paid';

        }else if($status == 'PENDING'){
            $donation->status = 'pending';
        }  else if($status == 'FAILED')
        {
            $donation->status = 'failed';
        }

        $donation->save();

        if($status==='COMPLETED'){
            return view('donation_process.success');

        }else{
            return view('donation_process.failure');
        }



    }


}
